{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useMemo } from 'react';\nimport { useSearchParams } from 'react-router-dom';\n\nconst useParams = () => {\n  _s();\n\n  const [params, setParams] = useSearchParams();\n  const myParams = useMemo(() => {\n    const searchTermsFromURL = params.get('searchTerms') || '';\n    const categoriesFromURL = params.getAll('category') || [];\n    return {\n      searchTermsFromURL,\n      categoriesFromURL\n    };\n  }, [params]);\n  /**\r\n   * Set query string parameter.\r\n   * @param {string} name Parameter name.\r\n   * @param {string | string[]} value Parameter value.\r\n   */\n\n  const setParam = (name, value) => {\n    const newParams = new URLSearchParams(params);\n    newParams.delete(name);\n\n    if (Array.isArray(value)) {\n      value.forEach(item => newParams.append(name, item));\n    } else if (value.trim()) {\n      newParams.set(name, value.trim());\n    }\n\n    setParams(newParams);\n  };\n\n  return {\n    myParams,\n    setParam\n  };\n};\n\n_s(useParams, \"bVX7mk3VTqbjVgA5kXoRMujzl9U=\", false, function () {\n  return [useSearchParams];\n});\n\nexport default useParams;","map":{"version":3,"names":["useMemo","useSearchParams","useParams","params","setParams","myParams","searchTermsFromURL","get","categoriesFromURL","getAll","setParam","name","value","newParams","URLSearchParams","delete","Array","isArray","forEach","item","append","trim","set"],"sources":["C:/Users/actc/store/src/hooks/params.hook.js"],"sourcesContent":["import { useMemo } from 'react';\r\nimport { useSearchParams } from 'react-router-dom';\r\n\r\nconst useParams = () => {\r\n  const [params, setParams] = useSearchParams();\r\n\r\n  const myParams = useMemo(() => {\r\n    const searchTermsFromURL = params.get('searchTerms') || '';\r\n    const categoriesFromURL = params.getAll('category') || [];\r\n    return { searchTermsFromURL, categoriesFromURL };\r\n  }, [params]);\r\n\r\n  /**\r\n   * Set query string parameter.\r\n   * @param {string} name Parameter name.\r\n   * @param {string | string[]} value Parameter value.\r\n   */\r\n  const setParam = (name, value) => {\r\n    const newParams = new URLSearchParams(params);\r\n\r\n    newParams.delete(name);\r\n\r\n    if (Array.isArray(value)) {\r\n      value.forEach(item => newParams.append(name, item));\r\n    } else if (value.trim()) {\r\n      newParams.set(name, value.trim());\r\n    }\r\n    setParams(newParams);\r\n  };\r\n\r\n  return { myParams, setParam };\r\n\r\n};\r\n\r\nexport default useParams;"],"mappings":";;AAAA,SAASA,OAAT,QAAwB,OAAxB;AACA,SAASC,eAAT,QAAgC,kBAAhC;;AAEA,MAAMC,SAAS,GAAG,MAAM;EAAA;;EACtB,MAAM,CAACC,MAAD,EAASC,SAAT,IAAsBH,eAAe,EAA3C;EAEA,MAAMI,QAAQ,GAAGL,OAAO,CAAC,MAAM;IAC7B,MAAMM,kBAAkB,GAAGH,MAAM,CAACI,GAAP,CAAW,aAAX,KAA6B,EAAxD;IACA,MAAMC,iBAAiB,GAAGL,MAAM,CAACM,MAAP,CAAc,UAAd,KAA6B,EAAvD;IACA,OAAO;MAAEH,kBAAF;MAAsBE;IAAtB,CAAP;EACD,CAJuB,EAIrB,CAACL,MAAD,CAJqB,CAAxB;EAMA;AACF;AACA;AACA;AACA;;EACE,MAAMO,QAAQ,GAAG,CAACC,IAAD,EAAOC,KAAP,KAAiB;IAChC,MAAMC,SAAS,GAAG,IAAIC,eAAJ,CAAoBX,MAApB,CAAlB;IAEAU,SAAS,CAACE,MAAV,CAAiBJ,IAAjB;;IAEA,IAAIK,KAAK,CAACC,OAAN,CAAcL,KAAd,CAAJ,EAA0B;MACxBA,KAAK,CAACM,OAAN,CAAcC,IAAI,IAAIN,SAAS,CAACO,MAAV,CAAiBT,IAAjB,EAAuBQ,IAAvB,CAAtB;IACD,CAFD,MAEO,IAAIP,KAAK,CAACS,IAAN,EAAJ,EAAkB;MACvBR,SAAS,CAACS,GAAV,CAAcX,IAAd,EAAoBC,KAAK,CAACS,IAAN,EAApB;IACD;;IACDjB,SAAS,CAACS,SAAD,CAAT;EACD,CAXD;;EAaA,OAAO;IAAER,QAAF;IAAYK;EAAZ,CAAP;AAED,CA7BD;;GAAMR,S;UACwBD,e;;;AA8B9B,eAAeC,SAAf"},"metadata":{},"sourceType":"module"}